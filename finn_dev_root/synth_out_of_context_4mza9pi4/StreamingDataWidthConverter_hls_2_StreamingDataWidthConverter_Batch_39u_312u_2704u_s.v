// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module StreamingDataWidthConverter_hls_2_StreamingDataWidthConverter_Batch_39u_312u_2704u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in0_V_TVALID,
        intermediate1_din,
        intermediate1_num_data_valid,
        intermediate1_fifo_cap,
        intermediate1_full_n,
        intermediate1_write,
        in0_V_TDATA,
        in0_V_TREADY
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   in0_V_TVALID;
output  [311:0] intermediate1_din;
input  [1:0] intermediate1_num_data_valid;
input  [1:0] intermediate1_fifo_cap;
input   intermediate1_full_n;
output   intermediate1_write;
input  [39:0] in0_V_TDATA;
output   in0_V_TREADY;

reg ap_idle;
reg intermediate1_write;

reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state0;
wire   [0:0] icmp_ln557_fu_99_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln557_reg_204;
wire   [0:0] icmp_ln557_reg_204_pp0_iter0_reg;
reg   [0:0] icmp_ln566_reg_214;
reg    ap_predicate_op33_write_state2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_CS_iter1_fsm_state2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in0_V_TDATA_blk_n;
reg    intermediate1_blk_n;
wire   [38:0] ei_V_fu_114_p1;
reg   [38:0] ei_V_reg_208;
wire   [0:0] icmp_ln566_fu_124_p2;
reg   [272:0] p_Val2_s_fu_56;
wire   [272:0] trunc_ln_fu_169_p3;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg   [272:0] ap_sig_allocacmp_p_Val2_load;
reg   [272:0] ap_sig_allocacmp_p_Val2_load_1;
reg   [31:0] i_fu_60;
wire   [31:0] i_1_fu_118_p2;
reg   [31:0] ap_sig_allocacmp_i_load;
reg   [11:0] t_fu_64;
wire   [11:0] t_2_fu_105_p2;
reg   [11:0] ap_sig_allocacmp_t_1;
wire   [233:0] tmp_fu_159_p4;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg    ap_ST_iter0_fsm_state1_blk;
reg    ap_ST_iter1_fsm_state2_blk;
wire    ap_start_int;
wire    regslice_both_in0_V_U_apdone_blk;
wire   [39:0] in0_V_TDATA_int_regslice;
wire    in0_V_TVALID_int_regslice;
reg    in0_V_TREADY_int_regslice;
wire    regslice_both_in0_V_U_ack_in;
reg    ap_condition_242;
reg    ap_condition_109;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_done_reg = 1'b0;
end

StreamingDataWidthConverter_hls_2_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

StreamingDataWidthConverter_hls_2_regslice_both #(
    .DataWidth( 40 ))
regslice_both_in0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(in0_V_TDATA),
    .vld_in(in0_V_TVALID),
    .ack_in(regslice_both_in0_V_U_ack_in),
    .data_out(in0_V_TDATA_int_regslice),
    .vld_out(in0_V_TVALID_int_regslice),
    .ack_out(in0_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_done_reg == 1'b1) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0))) & (ap_loop_exit_ready == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_242)) begin
        if (((icmp_ln566_fu_124_p2 == 1'd1) & (icmp_ln557_fu_99_p2 == 1'd0))) begin
            i_fu_60 <= 32'd0;
        end else if (((icmp_ln566_fu_124_p2 == 1'd0) & (icmp_ln557_fu_99_p2 == 1'd0))) begin
            i_fu_60 <= i_1_fu_118_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_109)) begin
        if ((icmp_ln557_reg_204 == 1'd0)) begin
            p_Val2_s_fu_56 <= trunc_ln_fu_169_p3;
        end else if ((ap_loop_init_pp0_iter1_reg == 1'b1)) begin
            p_Val2_s_fu_56 <= 273'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_242)) begin
        if ((icmp_ln557_fu_99_p2 == 1'd0)) begin
            t_fu_64 <= t_2_fu_105_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            t_fu_64 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        icmp_ln557_reg_204 <= icmp_ln557_fu_99_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0))) & (icmp_ln557_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ei_V_reg_208 <= ei_V_fu_114_p1;
        icmp_ln566_reg_214 <= icmp_ln566_fu_124_p2;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0)))) begin
        ap_ST_iter0_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_iter0_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0))) begin
        ap_ST_iter1_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_iter1_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0))) & (icmp_ln557_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 32'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_60;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_Val2_load = 273'd0;
    end else begin
        ap_sig_allocacmp_p_Val2_load = p_Val2_s_fu_56;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_p_Val2_load_1 = 273'd0;
    end else begin
        ap_sig_allocacmp_p_Val2_load_1 = p_Val2_s_fu_56;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_1 = 12'd0;
    end else begin
        ap_sig_allocacmp_t_1 = t_fu_64;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0)) & (icmp_ln557_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1) & (ap_start_int == 1'b1))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID_int_regslice;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0))) & (icmp_ln557_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        in0_V_TREADY_int_regslice = 1'b1;
    end else begin
        in0_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op33_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        intermediate1_blk_n = intermediate1_full_n;
    end else begin
        intermediate1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0))) & (ap_predicate_op33_write_state2 == 1'b1) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        intermediate1_write = 1'b1;
    end else begin
        intermediate1_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((ap_done_reg == 1'b1) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else if (((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0))) & ~((ap_done_reg == 1'b1) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1)) | (~((ap_done_reg == 1'b1) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0))) & (icmp_ln557_reg_204_pp0_iter0_reg == 1'd1) & (1'b1 == ap_CS_iter1_fsm_state2)))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state0 = ap_CS_iter1_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_109 = (~((ap_done_reg == 1'b1) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0))) & (1'b1 == ap_CS_iter1_fsm_state2));
end

always @ (*) begin
    ap_condition_242 = (~((ap_done_reg == 1'b1) | (ap_start_int == 1'b0) | ((ap_predicate_op33_write_state2 == 1'b1) & (intermediate1_full_n == 1'b0) & (1'b1 == ap_CS_iter1_fsm_state2)) | ((icmp_ln557_fu_99_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0))) & (1'b1 == ap_CS_iter0_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op33_write_state2 = ((icmp_ln566_reg_214 == 1'd1) & (icmp_ln557_reg_204 == 1'd0));
end

assign ei_V_fu_114_p1 = in0_V_TDATA_int_regslice[38:0];

assign i_1_fu_118_p2 = (ap_sig_allocacmp_i_load + 32'd1);

assign icmp_ln557_fu_99_p2 = ((ap_sig_allocacmp_t_1 == 12'd2704) ? 1'b1 : 1'b0);

assign icmp_ln557_reg_204_pp0_iter0_reg = icmp_ln557_reg_204;

assign icmp_ln566_fu_124_p2 = ((i_1_fu_118_p2 == 32'd8) ? 1'b1 : 1'b0);

assign in0_V_TREADY = regslice_both_in0_V_U_ack_in;

assign intermediate1_din = {{ei_V_reg_208}, {ap_sig_allocacmp_p_Val2_load}};

assign t_2_fu_105_p2 = (ap_sig_allocacmp_t_1 + 12'd1);

assign tmp_fu_159_p4 = {{ap_sig_allocacmp_p_Val2_load_1[272:39]}};

assign trunc_ln_fu_169_p3 = {{ei_V_reg_208}, {tmp_fu_159_p4}};

endmodule //StreamingDataWidthConverter_hls_2_StreamingDataWidthConverter_Batch_39u_312u_2704u_s

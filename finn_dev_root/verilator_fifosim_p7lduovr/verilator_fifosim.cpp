/* Copyright (C) 2022, Advanced Micro Devices, Inc.
All rights reserved.
#
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
#
* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.
#
* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.
#
* Neither the name of FINN nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.
#
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#include <iostream>
#include <fstream>
#include <cstddef>
#include <chrono>
#include "verilated.h"
#include "verilated_vcd_c.h"
#include "Vfinn_design_wrapper.h"

#ifdef DEBUG
#define TRACE(x) x
#else
#define TRACE(x) ;
#endif

using namespace std;

Vfinn_design_wrapper * top;

// code taken from pyverilator_wrapper.cpp generated by PyVerilator

// this is required by verilator for verilog designs using $time
// main_time is incremented in eval
double main_time = 0;

double sc_time_stamp() {
return main_time;
}
// function definitions
// helper functions for basic verilator tasks
extern "C" { //Open an extern C closed below
Vfinn_design_wrapper* construct() {
    Verilated::commandArgs(0, (const char**) nullptr);
    TRACE(Verilated::traceEverOn(true));
    Vfinn_design_wrapper* top = new Vfinn_design_wrapper();
    return top;
}
int eval(Vfinn_design_wrapper* top) {
    top->eval();
    main_time++;
    return 0;
}
int destruct(Vfinn_design_wrapper* top) {
    if (top != nullptr) {
        delete top;
        top = nullptr;
    }
    return 0;
}

TRACE(
VerilatedVcdC* tfp;
VerilatedVcdC* start_vcd_trace(Vfinn_design_wrapper* top, const char* filename) {
    VerilatedVcdC* tfp = new VerilatedVcdC;
    top->trace(tfp, 99);
    tfp->open(filename);
    return tfp;
}
int add_to_vcd_trace(VerilatedVcdC* tfp, int time) {
    tfp->dump(time);
    return 0;
}
int flush_vcd_trace(VerilatedVcdC* tfp) {
    tfp->flush();
    return 0;
}
int stop_vcd_trace(VerilatedVcdC* tfp) {
    tfp->close();
    return 0;
}
)

}

// end of code taken from pyverilator_wrapper.cpp generated by PyVerilator

inline void toggle_clk() {
    eval(top);
    top->ap_clk = 1;
    TRACE(add_to_vcd_trace(tfp, main_time));
    eval(top);
    top->ap_clk = 0;
    TRACE(add_to_vcd_trace(tfp, main_time));
}


void reset() {
    top->ap_rst_n = 0;
    for(unsigned i = 0; i < 10; i++) {
        toggle_clk();
    }
    top->ap_rst_n = 1;
}

int main(int argc, char *argv[]) {
    top = construct();
    TRACE(tfp = start_vcd_trace(top, "trace.vcd"));
    unsigned n_iters_per_input = 173056;
    unsigned n_iters_per_output = 3042;
    unsigned n_inputs = 2;
    unsigned max_iters = 100000000;

    reset();

    top->m_axis_0_tready = 1;
    top->s_axis_0_tvalid = 1;

    unsigned n_in_txns = 0, n_out_txns = 0, iters = 0, last_output_at = 0;
    unsigned latency = 0;

    bool exit_criterion = false;

    cout << "Simulation starting" << endl;
    cout << "Number of inputs to write " << n_iters_per_input * n_inputs << endl;
    cout << "Number of outputs to expect " << n_iters_per_output * n_inputs << endl;
    cout << "No-output timeout clock cycles " << max_iters << endl;

    chrono::steady_clock::time_point begin = chrono::steady_clock::now();

    while(!exit_criterion) {
        toggle_clk();
        iters++;
        if(iters % 1000 == 0) {
            cout << "Elapsed iters " << iters << " inps " << n_in_txns << " outs " << n_out_txns << endl;
            chrono::steady_clock::time_point end = chrono::steady_clock::now();
            cout << "Elapsed since last report = " << chrono::duration_cast<chrono::seconds>(end - begin).count() << "[s]" << endl;
            begin = end;
        }
        if(top->s_axis_0_tready == 1 && top->s_axis_0_tvalid == 1) {
            n_in_txns++;
            if(n_in_txns == n_iters_per_input * n_inputs) {
                top->s_axis_0_tvalid = 0;
                cout << "All inputs written at cycle " << iters << endl;
            }
        }
        if(top->m_axis_0_tvalid == 1) {
            n_out_txns++;
            last_output_at = iters;
            if(n_out_txns == n_iters_per_output) {
                latency = iters;
            }
        }

        exit_criterion = ((n_in_txns >= n_iters_per_input * n_inputs) && (n_out_txns >= n_iters_per_output * n_inputs)) || ((iters-last_output_at) > max_iters);
    }

    TRACE(flush_vcd_trace(tfp));
    TRACE(stop_vcd_trace(tfp));

    cout << "Simulation finished" << endl;
    cout << "Number of inputs consumed " << n_in_txns << endl;
    cout << "Number of outputs produced " << n_out_txns << endl;
    cout << "Number of clock cycles " << iters << endl;

    ofstream results_file;
    results_file.open("results.txt", ios::out | ios::trunc);
    results_file << "N_IN_TXNS" << "\t" << n_in_txns << endl;
    results_file << "N_OUT_TXNS" << "\t" << n_out_txns << endl;
    results_file << "cycles" << "\t" << iters << endl;
    results_file << "N" << "\t" << n_inputs << endl;
    results_file << "latency_cycles" << "\t" << latency << endl;
    results_file << "maxcount" << "\t" << to_string(top->maxcount) << endl;
    results_file << "maxcount_1" << "\t" << to_string(top->maxcount_1) << endl;
    results_file << "maxcount_2" << "\t" << to_string(top->maxcount_2) << endl;
    results_file << "maxcount_3" << "\t" << to_string(top->maxcount_3) << endl;
    results_file << "maxcount_4" << "\t" << to_string(top->maxcount_4) << endl;
    results_file << "maxcount_5" << "\t" << to_string(top->maxcount_5) << endl;
    results_file << "maxcount_6" << "\t" << to_string(top->maxcount_6) << endl;
    results_file << "maxcount_7" << "\t" << to_string(top->maxcount_7) << endl;
    results_file << "maxcount_8" << "\t" << to_string(top->maxcount_8) << endl;
    results_file << "maxcount_9" << "\t" << to_string(top->maxcount_9) << endl;
    results_file << "maxcount_10" << "\t" << to_string(top->maxcount_10) << endl;
    results_file << "maxcount_11" << "\t" << to_string(top->maxcount_11) << endl;
    results_file << "maxcount_12" << "\t" << to_string(top->maxcount_12) << endl;
    results_file << "maxcount_13" << "\t" << to_string(top->maxcount_13) << endl;
    results_file << "maxcount_14" << "\t" << to_string(top->maxcount_14) << endl;
    results_file << "maxcount_15" << "\t" << to_string(top->maxcount_15) << endl;
    results_file << "maxcount_16" << "\t" << to_string(top->maxcount_16) << endl;
    results_file << "maxcount_17" << "\t" << to_string(top->maxcount_17) << endl;
    results_file << "maxcount_18" << "\t" << to_string(top->maxcount_18) << endl;
    results_file << "maxcount_19" << "\t" << to_string(top->maxcount_19) << endl;
    results_file << "maxcount_20" << "\t" << to_string(top->maxcount_20) << endl;
    results_file << "maxcount_21" << "\t" << to_string(top->maxcount_21) << endl;
    results_file << "maxcount_22" << "\t" << to_string(top->maxcount_22) << endl;
    results_file << "maxcount_23" << "\t" << to_string(top->maxcount_23) << endl;
    results_file << "maxcount_24" << "\t" << to_string(top->maxcount_24) << endl;
    results_file << "maxcount_25" << "\t" << to_string(top->maxcount_25) << endl;
    results_file << "maxcount_26" << "\t" << to_string(top->maxcount_26) << endl;
    results_file << "maxcount_27" << "\t" << to_string(top->maxcount_27) << endl;
    results_file << "maxcount_28" << "\t" << to_string(top->maxcount_28) << endl;
    results_file << "maxcount_29" << "\t" << to_string(top->maxcount_29) << endl;
    results_file << "maxcount_30" << "\t" << to_string(top->maxcount_30) << endl;
    results_file << "maxcount_31" << "\t" << to_string(top->maxcount_31) << endl;
    results_file << "maxcount_32" << "\t" << to_string(top->maxcount_32) << endl;
    results_file << "maxcount_33" << "\t" << to_string(top->maxcount_33) << endl;
    results_file << "maxcount_34" << "\t" << to_string(top->maxcount_34) << endl;
    results_file << "maxcount_35" << "\t" << to_string(top->maxcount_35) << endl;
    results_file << "maxcount_36" << "\t" << to_string(top->maxcount_36) << endl;
    results_file << "maxcount_37" << "\t" << to_string(top->maxcount_37) << endl;
    results_file << "maxcount_38" << "\t" << to_string(top->maxcount_38) << endl;
    results_file << "maxcount_39" << "\t" << to_string(top->maxcount_39) << endl;
    results_file << "maxcount_40" << "\t" << to_string(top->maxcount_40) << endl;
    results_file << "maxcount_41" << "\t" << to_string(top->maxcount_41) << endl;
    results_file << "maxcount_42" << "\t" << to_string(top->maxcount_42) << endl;
    results_file << "maxcount_43" << "\t" << to_string(top->maxcount_43) << endl;
    results_file << "maxcount_44" << "\t" << to_string(top->maxcount_44) << endl;
    results_file << "maxcount_45" << "\t" << to_string(top->maxcount_45) << endl;
    results_file << "maxcount_46" << "\t" << to_string(top->maxcount_46) << endl;
    results_file << "maxcount_47" << "\t" << to_string(top->maxcount_47) << endl;
    results_file << "maxcount_48" << "\t" << to_string(top->maxcount_48) << endl;
    results_file << "maxcount_49" << "\t" << to_string(top->maxcount_49) << endl;
    results_file << "maxcount_50" << "\t" << to_string(top->maxcount_50) << endl;
    results_file << "maxcount_51" << "\t" << to_string(top->maxcount_51) << endl;
    results_file << "maxcount_52" << "\t" << to_string(top->maxcount_52) << endl;
    results_file.close();



    destruct(top);

    return 0;
}

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity StreamingDataWidthConverter_hls_2_StreamingDataWidthConverter_Batch_39u_312u_2704u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in0_V_TVALID : IN STD_LOGIC;
    intermediate1_din : OUT STD_LOGIC_VECTOR (311 downto 0);
    intermediate1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    intermediate1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    intermediate1_full_n : IN STD_LOGIC;
    intermediate1_write : OUT STD_LOGIC;
    in0_V_TDATA : IN STD_LOGIC_VECTOR (39 downto 0);
    in0_V_TREADY : OUT STD_LOGIC );
end;


architecture behav of StreamingDataWidthConverter_hls_2_StreamingDataWidthConverter_Batch_39u_312u_2704u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_iter0_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_iter1_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_iter1_fsm_state0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv273_lc_1 : STD_LOGIC_VECTOR (272 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_0_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_A90 : STD_LOGIC_VECTOR (11 downto 0) := "101010010000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";

attribute shreg_extract : string;
    signal ap_CS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal ap_CS_iter0_fsm_state1 : STD_LOGIC;
    signal ap_CS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    signal ap_CS_iter1_fsm_state0 : STD_LOGIC;
    signal icmp_ln557_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln557_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln557_reg_204_pp0_iter0_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln566_reg_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op33_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_CS_iter1_fsm_state2 : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in0_V_TDATA_blk_n : STD_LOGIC;
    signal intermediate1_blk_n : STD_LOGIC;
    signal ei_V_fu_114_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal ei_V_reg_208 : STD_LOGIC_VECTOR (38 downto 0);
    signal icmp_ln566_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_56 : STD_LOGIC_VECTOR (272 downto 0);
    signal trunc_ln_fu_169_p3 : STD_LOGIC_VECTOR (272 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_init_pp0_iter1_reg : STD_LOGIC;
    signal ap_sig_allocacmp_p_Val2_load : STD_LOGIC_VECTOR (272 downto 0);
    signal ap_sig_allocacmp_p_Val2_load_1 : STD_LOGIC_VECTOR (272 downto 0);
    signal i_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_64 : STD_LOGIC_VECTOR (11 downto 0);
    signal t_2_fu_105_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_t_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_159_p4 : STD_LOGIC_VECTOR (233 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_iter0_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_iter1_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_iter0_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_iter1_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal regslice_both_in0_V_U_apdone_blk : STD_LOGIC;
    signal in0_V_TDATA_int_regslice : STD_LOGIC_VECTOR (39 downto 0);
    signal in0_V_TVALID_int_regslice : STD_LOGIC;
    signal in0_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in0_V_U_ack_in : STD_LOGIC;
    signal ap_condition_242 : BOOLEAN;
    signal ap_condition_109 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component StreamingDataWidthConverter_hls_2_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component StreamingDataWidthConverter_hls_2_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component StreamingDataWidthConverter_hls_2_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);

    regslice_both_in0_V_U : component StreamingDataWidthConverter_hls_2_regslice_both
    generic map (
        DataWidth => 40)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in0_V_TDATA,
        vld_in => in0_V_TVALID,
        ack_in => regslice_both_in0_V_U_ack_in,
        data_out => in0_V_TDATA_int_regslice,
        vld_out => in0_V_TVALID_int_regslice,
        ack_out => in0_V_TREADY_int_regslice,
        apdone_blk => regslice_both_in0_V_U_apdone_blk);





    ap_CS_iter0_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            else
                ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
            end if;
        end if;
    end process;


    ap_CS_iter1_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
            else
                ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0)))) and (ap_loop_exit_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_242)) then
                if (((icmp_ln566_fu_124_p2 = ap_const_lv1_1) and (icmp_ln557_fu_99_p2 = ap_const_lv1_0))) then 
                    i_fu_60 <= ap_const_lv32_0_2;
                elsif (((icmp_ln566_fu_124_p2 = ap_const_lv1_0) and (icmp_ln557_fu_99_p2 = ap_const_lv1_0))) then 
                    i_fu_60 <= i_1_fu_118_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_60 <= ap_const_lv32_0_1;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_109)) then
                if ((icmp_ln557_reg_204 = ap_const_lv1_0)) then 
                    p_Val2_s_fu_56 <= trunc_ln_fu_169_p3;
                elsif ((ap_loop_init_pp0_iter1_reg = ap_const_logic_1)) then 
                    p_Val2_s_fu_56 <= ap_const_lv273_lc_1;
                end if;
            end if; 
        end if;
    end process;

    t_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_242)) then
                if ((icmp_ln557_fu_99_p2 = ap_const_lv1_0)) then 
                    t_fu_64 <= t_2_fu_105_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    t_fu_64 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                ap_loop_init_pp0_iter1_reg <= ap_loop_init;
                icmp_ln557_reg_204 <= icmp_ln557_fu_99_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                ei_V_reg_208 <= ei_V_fu_114_p1;
                icmp_ln566_reg_214 <= icmp_ln566_fu_124_p2;
            end if;
        end if;
    end process;

    ap_NS_iter0_fsm_assign_proc : process (ap_CS_iter0_fsm, icmp_ln557_fu_99_p2, ap_done_reg, intermediate1_full_n, ap_predicate_op33_write_state2, ap_CS_iter1_fsm_state2, ap_start_int, in0_V_TVALID_int_regslice)
    begin
        case ap_CS_iter0_fsm is
            when ap_ST_iter0_fsm_state1 => 
                ap_NS_iter0_fsm <= ap_ST_iter0_fsm_state1;
            when others =>  
                ap_NS_iter0_fsm <= "X";
        end case;
    end process;

    ap_NS_iter1_fsm_assign_proc : process (ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm, icmp_ln557_fu_99_p2, ap_done_reg, intermediate1_full_n, icmp_ln557_reg_204_pp0_iter0_reg, ap_predicate_op33_write_state2, ap_CS_iter1_fsm_state2, ap_start_int, in0_V_TVALID_int_regslice)
    begin
        case ap_CS_iter1_fsm is
            when ap_ST_iter1_fsm_state2 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0)))) and ((ap_const_logic_0 = ap_CS_iter0_fsm_state1) or ((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and ((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0))))))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                elsif (((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)))) and not(((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1)) or (not(((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0)))) and (icmp_ln557_reg_204_pp0_iter0_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                end if;
            when ap_ST_iter1_fsm_state0 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state2;
                else
                    ap_NS_iter1_fsm <= ap_ST_iter1_fsm_state0;
                end if;
            when others =>  
                ap_NS_iter1_fsm <= "XX";
        end case;
    end process;
    ap_CS_iter0_fsm_state1 <= ap_CS_iter0_fsm(0);
    ap_CS_iter1_fsm_state0 <= ap_CS_iter1_fsm(0);
    ap_CS_iter1_fsm_state2 <= ap_CS_iter1_fsm(1);

    ap_ST_iter0_fsm_state1_blk_assign_proc : process(icmp_ln557_fu_99_p2, ap_done_reg, ap_start_int, in0_V_TVALID_int_regslice)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)))) then 
            ap_ST_iter0_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_iter0_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_iter1_fsm_state2_blk_assign_proc : process(intermediate1_full_n, ap_predicate_op33_write_state2)
    begin
        if (((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0))) then 
            ap_ST_iter1_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_iter1_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(icmp_ln557_fu_99_p2, ap_done_reg, ap_start_int, in0_V_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(intermediate1_full_n, ap_predicate_op33_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0));
    end process;


    ap_condition_109_assign_proc : process(ap_done_reg, intermediate1_full_n, ap_predicate_op33_write_state2, ap_CS_iter1_fsm_state2)
    begin
                ap_condition_109 <= (not(((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2));
    end process;


    ap_condition_242_assign_proc : process(ap_CS_iter0_fsm_state1, icmp_ln557_fu_99_p2, ap_done_reg, intermediate1_full_n, ap_predicate_op33_write_state2, ap_CS_iter1_fsm_state2, ap_start_int, in0_V_TVALID_int_regslice)
    begin
                ap_condition_242 <= (not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_iter0_fsm_state1, icmp_ln557_fu_99_p2, ap_done_reg, intermediate1_full_n, ap_predicate_op33_write_state2, ap_CS_iter1_fsm_state2, ap_start_int, in0_V_TVALID_int_regslice)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln557_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, intermediate1_full_n, ap_predicate_op33_write_state2, ap_CS_iter1_fsm_state2, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_iter0_fsm_state1, ap_CS_iter1_fsm_state0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op33_write_state2_assign_proc : process(icmp_ln557_reg_204, icmp_ln566_reg_214)
    begin
                ap_predicate_op33_write_state2 <= ((icmp_ln566_reg_214 = ap_const_lv1_1) and (icmp_ln557_reg_204 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_iter0_fsm_state1, icmp_ln557_fu_99_p2, ap_done_reg, intermediate1_full_n, ap_predicate_op33_write_state2, ap_CS_iter1_fsm_state2, ap_start_int, in0_V_TVALID_int_regslice)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_iter0_fsm_state1, ap_loop_init, i_fu_60)
    begin
        if (((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv32_0_1;
        else 
            ap_sig_allocacmp_i_load <= i_fu_60;
        end if; 
    end process;


    ap_sig_allocacmp_p_Val2_load_assign_proc : process(ap_CS_iter1_fsm_state2, p_Val2_s_fu_56, ap_loop_init_pp0_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_loop_init_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_Val2_load <= ap_const_lv273_lc_1;
        else 
            ap_sig_allocacmp_p_Val2_load <= p_Val2_s_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_p_Val2_load_1_assign_proc : process(ap_CS_iter1_fsm_state2, p_Val2_s_fu_56, ap_loop_init_pp0_iter1_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_iter1_fsm_state2) and (ap_loop_init_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_Val2_load_1 <= ap_const_lv273_lc_1;
        else 
            ap_sig_allocacmp_p_Val2_load_1 <= p_Val2_s_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_t_1_assign_proc : process(ap_CS_iter0_fsm_state1, ap_loop_init, t_fu_64)
    begin
        if (((ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_t_1 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_t_1 <= t_fu_64;
        end if; 
    end process;

    ei_V_fu_114_p1 <= in0_V_TDATA_int_regslice(39 - 1 downto 0);
    i_1_fu_118_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv32_1));
    icmp_ln557_fu_99_p2 <= "1" when (ap_sig_allocacmp_t_1 = ap_const_lv12_A90) else "0";
    icmp_ln557_reg_204_pp0_iter0_reg <= icmp_ln557_reg_204;
    icmp_ln566_fu_124_p2 <= "1" when (i_1_fu_118_p2 = ap_const_lv32_8) else "0";

    in0_V_TDATA_blk_n_assign_proc : process(ap_CS_iter0_fsm_state1, icmp_ln557_fu_99_p2, ap_done_reg, ap_start_int, in0_V_TVALID_int_regslice)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0))) and (icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            in0_V_TDATA_blk_n <= in0_V_TVALID_int_regslice;
        else 
            in0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in0_V_TREADY <= regslice_both_in0_V_U_ack_in;

    in0_V_TREADY_int_regslice_assign_proc : process(ap_CS_iter0_fsm_state1, icmp_ln557_fu_99_p2, ap_done_reg, intermediate1_full_n, ap_predicate_op33_write_state2, ap_CS_iter1_fsm_state2, ap_start_int, in0_V_TVALID_int_regslice)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start_int = ap_const_logic_0) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2)) or ((icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (in0_V_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln557_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_iter0_fsm_state1))) then 
            in0_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in0_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    intermediate1_blk_n_assign_proc : process(intermediate1_full_n, ap_predicate_op33_write_state2, ap_CS_iter1_fsm_state2)
    begin
        if (((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            intermediate1_blk_n <= intermediate1_full_n;
        else 
            intermediate1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    intermediate1_din <= (ei_V_reg_208 & ap_sig_allocacmp_p_Val2_load);

    intermediate1_write_assign_proc : process(ap_done_reg, intermediate1_full_n, ap_predicate_op33_write_state2, ap_CS_iter1_fsm_state2)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op33_write_state2 = ap_const_boolean_1) and (intermediate1_full_n = ap_const_logic_0)))) and (ap_predicate_op33_write_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_iter1_fsm_state2))) then 
            intermediate1_write <= ap_const_logic_1;
        else 
            intermediate1_write <= ap_const_logic_0;
        end if; 
    end process;

    t_2_fu_105_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_t_1) + unsigned(ap_const_lv12_1));
    tmp_fu_159_p4 <= ap_sig_allocacmp_p_Val2_load_1(272 downto 39);
    trunc_ln_fu_169_p3 <= (ei_V_reg_208 & tmp_fu_159_p4);
end behav;
